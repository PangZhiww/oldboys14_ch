# 正则表达式
    # 基础知识
        # 什么是正则
        # 应用领域
    # 正则表达式的语法
        # 元字符后面一定跟随的是量词
        # 元字符   # 在一个字符的位置上能够出现哪些内容
            # 字符组 []    [^]   |   ()
            # \w    \d  \s(\n, ,\t)     \W  \D  \S
            # ^   $
            # .

            #
        # 量词
            # ?+*
                # ? --> 0-1
                # + --> 1-无穷次
                # * --> 0-无穷次
            # {n}, {n,}, {n,m}
        # 特殊的用法和现象
            # ?的使用
                # 1. 在量词的后面跟了一个 ?    取消贪婪匹配, 变成非贪婪(惰性)模式
                    # ??
                    # *?
                    # +?
                    # 李.{1,3}?和 --> 李莲英和    惰性匹配
                    # 最常用 .*?x匹配任意字符,直到找到一个x
                #２．

# [1-9]\d{16}[0-9x]|[1-9]\d{14}     身份证号    |用法
# [1-9]\d{14}(\d{2}[1-9x])?   身份证号码     ()的用法

# \d+(\.\d+)?   匹配小数或整数


# 正则表达式总结
    # 元字符
    # 元字符量词, 默认贪婪模式
    # 元字符量词? 表示惰性匹配
















# 在Python中使用正则表达式
    # 转义符   在正则中的转义符 \ 在python中的转义符
        # 正则表达式里的转义
            # "\c"  表示匹配小括号
            # [()+*?/$.]     在字符组中一些特殊的字符会现出原形
            # 所有的\w \d \s \n \t \W \D \S 都表是它原本的意义
            # [-] 只有写在字符组收尾的时候表示普通的减号
                # 在写在其他位置的时候表示范围[1-9]
                # 如果就是想匹配减号[1\-9]

        # re模块
            # findall   search  match
            # sub   subn    split
            # compile   finditer
        # 在Python中的转义符
            # findall   和分组有关系  会优先显示分组中的内容, 要想取消分组优先 ?:正则表达式
            # split     遇到分组, 会保留分组内被切掉的内容
            # search    如果search中有分组的话, 通过group(n)就能够拿到group中的匹配的内容

# 正则表达式进阶
    # 分组命名
        # (?P<name>正则表达式)   表示给分组起名字
        # (?P=name)   表示使用这个分组, 这里匹配到的内容应该和分组中的内容完全相同
    # 通过索引使用分组
        # \1    表示使用第一组, 匹配到的内容必须和第一个组中的内容安全相同
